{"version":3,"sources":["components/WeatherCard/styles.js","components/WeatherCard/index.jsx","components/Container/styles.js","components/Container/index.jsx","components/WeatherDetailsCard/styles.js","components/WeatherDetailsCard/index.jsx","pages/WeatherDetails/styles.js","pages/WeatherDetails/index.jsx","App.js","serviceWorker.js","index.js"],"names":["WeatherCardContainer","styled","div","TextContainer","p","props","isTemp","ImageContainer","WeatherCard","history","useHistory","location","useLocation","className","day","pathname","onClick","push","id","src","icon","alt","dayTemp","nightTemp","Content","MainTable","Background","Container","children","Image","img","WeatherContainer","WeatherDetailsCard","time","temp","HourlyCardsContainer","DetailsContainer","loader","keyframes","Spinner","WeatherDetails","useState","cardData","setCardData","isLoading","setIsLoading","useEffect","daysInWeek","fetch","then","response","json","data","filter","element","date","Date","dt","getDay","forEach","prevState","length","getHours","getMinutes","Number","main","toFixed","weather","handleHourlyWeatherData","list","map","card","key","App","slice","night","path","handleWeatherData","daily","to","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2ef9af8f.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nexport const WeatherCardContainer = styled.div`\r\n  padding: 4px;\r\n  margin: 5px;\r\n  margin-top: 10px;\r\n  margin-bottom: 20px;\r\n  cursor: pointer;\r\n  background-color: skyblue;\r\n\r\n  border-style: solid;\r\n  border-radius: 25px;\r\n  border-color: lightblue;\r\n  box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.09);\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  transition: all 0.2s ease-in-out;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n\r\n  &.active {\r\n    -moz-box-shadow: inset 0 0 2px #000000;\r\n    -webkit-box-shadow: inset 0 0 2px #000000;\r\n    box-shadow: inset 0 0 2px #000000;\r\n    transform: scale(1.1);\r\n    border-color: black;\r\n  }\r\n`;\r\n\r\nexport const TextContainer = styled.p`\r\n  margin: 0;\r\n  text-align: center;\r\n  font-weight: bold;\r\n  font-size: 12px;\r\n  ${(props) =>\r\n    props.isTemp &&\r\n    `\r\n  font-weight: normal;\r\n  `}\r\n`;\r\n\r\nexport const ImageContainer = styled.div`\r\n  margin: 0px;\r\n  padding: 0px;\r\n  > img {\r\n    width: 80px;\r\n    height: 80px;\r\n  }\r\n`;\r\n","import React from \"react\";\r\nimport { useHistory, useLocation } from \"react-router-dom\";\r\nimport { WeatherCardContainer, TextContainer, ImageContainer } from \"./styles\";\r\n\r\nconst WeatherCard = (props) => {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  return (\r\n    <WeatherCardContainer\r\n      className={`/${props.day}` === location.pathname && \"active\"}\r\n      onClick={() => {\r\n        history.push(`/${props.day}`);\r\n      }}\r\n    >\r\n      <TextContainer>{props.id === 1 ? \"Today\" : props.day}</TextContainer>\r\n      <ImageContainer>\r\n        <img\r\n          src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`}\r\n          alt=\"weather\"\r\n        />\r\n      </ImageContainer>\r\n      <TextContainer isTemp={true}>\r\n        {`${props.dayTemp}°C /  ${props.nightTemp}°C`}\r\n      </TextContainer>\r\n    </WeatherCardContainer>\r\n  );\r\n};\r\n\r\nexport default WeatherCard;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Content = styled.div`\r\n  margin-top: 50px;\r\n  margin-bottom: 150px;\r\n  position: fixed;\r\n  top: 0px;\r\n  left: 25%;\r\n  right: 25%;\r\n  display: flex;\r\n  justify-content: center;\r\n  transform: translateY(-30%);\r\n  width: 50%;\r\n  height: 175px;\r\n  text-align: center;\r\n  z-index: 10;\r\n\r\n  border-style: solid;\r\n  border-color: white;\r\n  border-bottom-left-radius: 50px;\r\n  border-bottom-right-radius: 50px;\r\n  background-color: silver;\r\n\r\n  box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.09);\r\n`;\r\n\r\nexport const MainTable = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  position: absolute;\r\n  left: 2.5%;\r\n  right: 2.5%;\r\n  top: 0;\r\n  width: 95%;\r\n  height: 500px;\r\n  text-align: center;\r\n  background-color: snow;\r\n\r\n  border-bottom-left-radius: 15px;\r\n  border-bottom-right-radius: 15px;\r\n\r\n  box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.09);\r\n`;\r\n\r\nexport const Background = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: flex-end;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  height: 200vh;\r\n  text-align: center;\r\n\r\n  background-color: dimgray;\r\n`;\r\n","import React from 'react'\r\nimport { Content } from './styles';\r\n\r\nconst Container = (props) => {\r\n    return (\r\n        <Content>\r\n            {props.children}\r\n        </Content>\r\n    )\r\n}\r\n\r\nexport default Container;\r\n","import styled from \"styled-components\";\r\n\r\nexport const WeatherCardContainer = styled.div`\r\n  padding: 4px;\r\n  margin-left: 2px;\r\n  margin-right: 2px;\r\n\r\n  height: 75px;\r\n  width: 150px;\r\n\r\n  border-radius: 25px;\r\n  box-shadow: 5px 5px 8px rgba(0, 0, 0, 0.09);\r\n\r\n  background-color: cornflowerblue;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  transition: all 0.2s ease-in-out;\r\n\r\n  &:hover {\r\n    transform: scale(1.05);\r\n  }\r\n`;\r\n\r\nexport const TextContainer = styled.p`\r\n  margin: 0;\r\n  text-align: center;\r\n  font-weight: normal;\r\n  font-size: 14px;\r\n  color: white;\r\n`;\r\n\r\nexport const Image = styled.img`\r\n  max-height: 100%;\r\n  max-width: 80%;\r\n`;\r\n\r\nexport const WeatherContainer = styled.p`\r\n  margin: 0;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-around;\r\n  max-height: 80%;\r\n  width: 100%;\r\n`;\r\n","import React from 'react'\r\nimport {\r\n    WeatherCardContainer,\r\n    TextContainer,\r\n    Image,\r\n    WeatherContainer,\r\n} from \"./styles\";\r\n\r\nconst WeatherDetailsCard = (props) => {\r\n    return (\r\n        <WeatherCardContainer>\r\n            <TextContainer isTemp={true}>\r\n                {props.time}\r\n            </TextContainer>\r\n            <WeatherContainer>\r\n                <Image\r\n                    src={`http://openweathermap.org/img/wn/${props.icon}@2x.png`} alt=\"weather\"\r\n                />\r\n                <TextContainer>\r\n                    {`${props.temp}°C`}\r\n                </TextContainer>\r\n            </WeatherContainer>\r\n        </WeatherCardContainer>\r\n\r\n    )\r\n}\r\n\r\nexport default WeatherDetailsCard;\r\n","import styled, { keyframes } from 'styled-components';\r\n\r\nexport const HourlyCardsContainer = styled.div`\r\ndisplay: flex;\r\njustify-content: center;\r\nwidth: 100%;\r\nheight: 100px;\r\ntext-align: center;\r\ntransition: all 0.2s ease-in-out;\r\n`;\r\n\r\nexport const DetailsContainer = styled.div`\r\nmargin-top: 100px;\r\nmargin-bottom: 20px;\r\ndisplay: flex;\r\nflex-direction: column;\r\njustify-content: center;\r\nalign-items: center;\r\ntransform: translateY(-30%);\r\nwidth: 100%;\r\ntext-align: center;\r\ntransition: all 0.2s ease-in-out;\r\n`;\r\n\r\nconst loader = keyframes`\r\n    25%{\r\n        color: #2ecc71;\r\n    }\r\n    50%{\r\n        color: #f1c40f;\r\n    }\r\n    75%{\r\n        color: #e74c3c;\r\n    }\r\n    to{\r\n        transform: rotate(360deg);\r\n    }\r\n`;\r\n\r\nexport const Spinner = styled.div`\r\nmargin-bottom: 50px;\r\nwidth: 50px;\r\nheight: 50px;\r\nborder 5px solid;\r\ncolor: #3498db;\r\nborder-radius: 50%;\r\nborder-top-color: transparent;\r\nanimation: ${loader} 0.3s linear;\r\n`;\r\n\r\n","import React, { useState, useEffect } from 'react'\r\n\r\n\r\nimport WeatherDetailsCard from '../../components/WeatherDetailsCard';\r\n\r\nimport { HourlyCardsContainer, DetailsContainer, Spinner } from './styles';\r\n\r\nconst WeatherDetails = (props) => {\r\n  const [cardData, setCardData] = useState([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  useEffect(() => {\r\n    setCardData([]);\r\n    const daysInWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    const handleHourlyWeatherData = (data) => {\r\n      const hourlyData = data.filter((element) => {\r\n        let date = new Date(element.dt * 1000);\r\n        return daysInWeek[date.getDay()] === props.day;\r\n      })\r\n      hourlyData.forEach(element => {\r\n        let date = new Date(element.dt * 1000);\r\n        setCardData(prevState => [\r\n          ...prevState,\r\n          {\r\n            id: prevState.length + 1,\r\n            time: `${date.getHours()}:${date.getMinutes()}0`,\r\n            temp: Number((element.main.temp).toFixed(0)),\r\n            icon: element.weather[0].icon,\r\n          }\r\n        ]);\r\n      });\r\n    }\r\n    setIsLoading(true);\r\n    fetch('http://api.openweathermap.org/data/2.5/forecast?q=Ankara&units=metric&appid=bbff5fdfaa703dc86d0c5ec00333fa24')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        handleHourlyWeatherData(data.list);\r\n        setIsLoading(false);\r\n      });\r\n  }, [props.day]);\r\n\r\n  return (\r\n    (isLoading ?\r\n      <DetailsContainer>\r\n        <Spinner />\r\n      </DetailsContainer> :\r\n      <DetailsContainer>\r\n        <h1>{props.day}</h1>\r\n        <HourlyCardsContainer>\r\n          {\r\n            cardData.map(card =>\r\n              <WeatherDetailsCard\r\n                key={card.id}\r\n                time={card.time}\r\n                icon={card.icon}\r\n                temp={card.temp}\r\n              />\r\n            )\r\n          }\r\n        </HourlyCardsContainer>\r\n      </DetailsContainer>\r\n    )\r\n  );\r\n}\r\n\r\nexport default WeatherDetails;\r\n","import React, { useState, useEffect } from \"react\";\nimport {\n  Switch,\n  Route,\n  Redirect,\n  BrowserRouter as Router,\n} from \"react-router-dom\";\n\nimport \"./App.css\";\n\nimport WeatherCard from \"./components/WeatherCard\";\nimport Container from \"./components/Container\";\nimport { MainTable, Background } from \"./components/Container/styles\";\n\nimport WeatherDetails from \"./pages/WeatherDetails\";\n\nfunction App() {\n  const [cardData, setCardData] = useState([]);\n\n  useEffect(() => {\n    const daysInWeek = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\",\n    ];\n    const handleWeatherData = (data) => {\n      data.slice(0, 6).forEach((element) => {\n        let date = new Date(element.dt * 1000);\n        setCardData((prevState) => [\n          ...prevState,\n          {\n            id: prevState.length + 1,\n            day: daysInWeek[date.getDay()],\n            dayTemp: Number(element.temp.day.toFixed(0)),\n            nightTemp: Number(element.temp.night.toFixed(0)),\n            icon: element.weather[0].icon,\n            path: `/${daysInWeek[date.getDay()]}`,\n          },\n        ]);\n      });\n    };\n    fetch(\n      \"https://api.openweathermap.org/data/2.5/onecall?lat=39.92&lon=32.83&exclude=minutely,hourly,current&units=metric&appid=9373ead9d30fbc2e4f4840187b132942\"\n    )\n      .then((response) => response.json())\n      .then((data) => handleWeatherData(data.daily));\n  }, []);\n\n  return (\n    <Router>\n      <Container>\n        {cardData.map((card) => (\n          <WeatherCard\n            key={card.id}\n            id={card.id}\n            day={card.day}\n            icon={card.icon}\n            dayTemp={card.dayTemp}\n            nightTemp={card.nightTemp}\n          />\n        ))}\n      </Container>\n      <Background>\n        <MainTable>\n          <Switch>\n            <Route path=\"/monday\">\n              <WeatherDetails day={\"Monday\"} />\n            </Route>\n            <Route path=\"/tuesday\">\n              <WeatherDetails day={\"Tuesday\"} />\n            </Route>\n            <Route path=\"/wednesday\">\n              <WeatherDetails day={\"Wednesday\"} />\n            </Route>\n            <Route path=\"/thursday\">\n              <WeatherDetails day={\"Thursday\"} />\n            </Route>\n            <Route path=\"/friday\">\n              <WeatherDetails day={\"Friday\"} />\n            </Route>\n            <Route path=\"/saturday\">\n              <WeatherDetails day={\"Saturday\"} />\n            </Route>\n            <Route path=\"/sunday\">\n              <WeatherDetails day={\"Sunday\"} />\n            </Route>\n            <Route path=\"/\">\n              <div></div>\n            </Route>\n            <Redirect to=\"/\" />\n          </Switch>\n        </MainTable>\n      </Background>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}